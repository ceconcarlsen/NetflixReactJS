{"version":3,"sources":["Tmdb.js","Components/MovieRow/index.jsx","Components/FeaturedMovie/index.jsx","Components/Header/index.jsx","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","moveId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","alt","original_title","src","poster_path","FeaturedMovie","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","target","rel","App","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"oRAOMA,G,MAAU,oCAeVC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACCC,MAAM,GAAD,OAfR,gCAeQ,OAAeF,IADrB,cACXG,EADW,gBAEEA,EAAIC,OAFN,cAEXA,EAFW,yBAGVA,GAHU,2CAAH,sDAMD,GACbC,YAAY,WAAD,4BAAE,sBAAAJ,EAAA,sEAMMF,EAAW,wDAAD,OACmCD,IAPnD,gCAIPQ,KAAM,YACNC,MAAO,uBACPC,MANO,eAaMT,EAAW,6CAAD,OACwBD,IAdxC,gCAWPQ,KAAM,WACNC,MAAO,4BACPC,MAbO,gBAoBMT,EAAW,2CAAD,OACsBD,IArBtC,iCAkBPQ,KAAM,WACNC,MAAO,UACPC,MApBO,gBA2BMT,EAAW,yDAAD,OACoCD,IA5BpD,iCAyBPQ,KAAM,SACNC,MAAO,aACPC,MA3BO,gBAkCMT,EAAW,yDAAD,OACoCD,IAnCpD,iCAgCPQ,KAAM,SACNC,MAAO,aACPC,MAlCO,gBAyCMT,EAAW,yDAAD,OACoCD,IA1CpD,mCAuCPQ,KAAM,SACNC,MAAO,SACPC,MAzCO,iBAgDMT,EAAW,4DAAD,OACuCD,IAjDvD,mCA8CPQ,KAAM,UACNC,MAAO,UACPC,MAhDO,iBAuDMT,EAAW,yDAAD,OACoCD,IAxDpD,mCAqDPQ,KAAM,cACNC,MAAO,kBACPC,MAvDO,mHAAF,kDAAC,GA8DZC,aAAa,WAAD,4BAAE,WAAOC,EAAQC,GAAf,eAAAV,EAAA,yDACRW,EAAO,IAEJF,EAHK,sBAIEC,EAJF,OAKD,UALC,OAUD,OAVC,uCAMSZ,EAAW,UAAD,OACXW,EADW,mCACsBZ,IAPzC,cAMJc,EANI,oDAWSb,EAAW,OAAD,OACdW,EADc,mCACmBZ,IAZtC,eAWJc,EAXI,oCAgBJA,EAAO,4BAhBH,iCAqBLA,GArBK,4CAAF,qDAAC,I,iDChCAC,MArDf,YAAqC,IAAjBN,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MAEzB,EAA8BM,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAmBA,OACE,sBAAKC,UAAU,WAAf,UACE,6BAAKV,IAEL,qBAAKU,UAAU,iBAAiBC,QApBZ,WACtB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC9CJ,EAAI,IACLA,EAAI,GAENH,EAAWG,IAeT,SACE,cAAC,IAAD,CAAoBK,MAAO,CAAEC,SAAU,QAGzC,qBAAKR,UAAU,kBAAkBC,QAjBZ,WACvB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC7CG,EAA+B,IAAvBlB,EAAMmB,QAAQC,OACtBN,OAAOC,WAAaG,EAASP,IAC/BA,EAAKG,OAAOC,WAAaG,EAAS,IAEpCV,EAAWG,IAWT,SACE,cAAC,IAAD,CAAkBK,MAAO,CAAEC,SAAU,QAGvC,qBAAKR,UAAU,qBAAf,SACE,qBAAKA,UAAU,iBAAiBO,MAAO,CACnCK,WAAYd,EACZe,MAA8B,IAAvBtB,EAAMmB,QAAQC,QAFzB,SAIGpB,EAAMmB,QAAQC,OAAS,GACtBpB,EAAMmB,QAAQI,KAAI,SAACC,EAAMC,GAAP,OAChB,qBAAehB,UAAU,iBAAzB,SACE,qBACEiB,IAAKF,EAAKG,eACVC,IAAG,yCAAoCJ,EAAKK,gBAHtCJ,c,MCMTK,MAjDf,YAAkC,IAATN,EAAQ,EAARA,KAEnBO,EAAY,IAAIC,KAAKR,EAAKS,gBAC1BC,EAAS,GACb,IAAI,IAAIC,KAAKX,EAAKU,OACdA,EAAOE,KAAKZ,EAAKU,OAAOC,GAAGE,MAG/B,IAAIC,EAAcd,EAAKe,SAKvB,OAJGD,EAAYlB,OAAS,MACtBkB,EAAcA,EAAYE,UAAU,EAAG,KAAK,OAI5C,yBACE/B,UAAU,WACVO,MAAO,CACLyB,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,0CAAD,OAA4CnB,EAAKoB,cAAjD,MALnB,SAQE,qBAAKnC,UAAU,qBAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCe,EAAKqB,gBACtC,sBAAKpC,UAAU,iBAAf,UACE,sBAAKA,UAAU,mBAAf,UAAmCe,EAAKsB,aAAxC,aACA,sBAAKrC,UAAU,iBAAf,UAAiCsB,EAAUgB,cAA3C,OACA,sBAAKtC,UAAU,oBAAf,UACGe,EAAKwB,kBADR,aAE8B,IAA3BxB,EAAKwB,kBAA0B,IAAM,SAI1C,qBAAKvC,UAAU,wBAAf,SAAwC6B,IACxC,sBAAK7B,UAAU,oBAAf,UACE,mBAAGA,UAAU,oBAAoBwC,KAAI,iBAAYzB,EAAK0B,IAAtD,8BACA,mBAAGzC,UAAU,oBAAoBwC,KAAI,oBAAezB,EAAK0B,IAAzD,8BAEF,sBAAKzC,UAAU,mBAAf,UACE,kDACCyB,EAAOiB,KAAK,iB,MCrBVC,MApBf,YAA0B,IAATC,EAAQ,EAARA,MACf,OACE,yBAAQ5C,UAAW4C,EAAQ,QAAU,KAArC,UACE,qBAAK5C,UAAU,eAAf,SACE,mBAAGwC,KAAK,IAAR,SACE,qBACErB,IAAI,4EACJF,IAAI,aAIR,qBAAKjB,UAAU,eAAf,SACE,mBAAGwC,KAAK,kCAAkCK,OAAO,SAASC,IAAI,aAA9D,SACE,qBAAK3B,IAAI,yEAAyEF,IAAI,iBC+DnF8B,MApEf,WACE,MAAkClD,mBAAS,IAA3C,mBAAOmD,EAAP,KAAkBC,EAAlB,KACA,EAAsCpD,mBAAS,MAA/C,mBAAOqD,EAAP,KAAoBC,EAApB,KACA,EAAsCtD,oBAAS,GAA/C,mBAAOuD,EAAP,KAAoBC,EAApB,KAwCA,OAtCAC,qBAAU,YAEK,uCAAG,oCAAAtE,EAAA,sEAEGuE,EAAKnE,cAFR,cAEVoE,EAFU,OAGdP,EAAaO,GAGTC,EAAYD,EAAKE,QAAO,SAAChC,GAAD,MAAkB,cAAXA,EAAErC,QACjCsE,EAAexD,KAAKyD,MACtBzD,KAAK0D,UAAYJ,EAAU,GAAGlE,MAAMmB,QAAQC,OAAS,IAEnDmD,EAASL,EAAU,GAAGlE,MAAMmB,QAAQiD,GAV1B,SAWSJ,EAAK/D,aAAasE,EAAOrB,GAAI,MAXtC,OAWVsB,EAXU,OAadZ,EAAeY,GAbD,4CAAH,qDAgBbC,KACC,IAEHV,qBAAU,WAGR,IAAMW,EAAiB,WACjB5D,OAAO6D,QAAU,GACnBb,GAAe,GAEfA,GAAe,IAKnB,OAFAhD,OAAO8D,iBAAiB,SAAUF,GAE3B,WACL5D,OAAO+D,oBAAoB,SAAUH,MAEtC,IAGD,sBAAKjE,UAAU,OAAf,UACE,cAAC,EAAD,CAAQ4C,MAAOQ,IACdF,GAAe,cAAC,EAAD,CAAenC,KAAMmC,IACrC,yBAASlD,UAAU,QAAnB,SACGgD,EAAUlC,KAAI,SAACC,EAAMC,GAAP,OACb,cAAC,EAAD,CAAoB1B,MAAOyB,EAAKzB,MAAOC,MAAOwB,EAAKxB,OAApCyB,QAInB,mCACE,qBAAKG,IAAI,qEAAqEF,IAAI,KAClF,uCAAS,mBAAGuB,KAAK,sCAAsCK,OAAO,SAASC,IAAI,aAAlE,+BACT,+DAGDE,EAAUrC,QAAU,GACrB,qBAAKX,UAAU,UAAf,SACE,qBAAKmB,IAAI,uEAAuEF,IAAI,qBCnE5FoD,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d9b81c56.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n/*\r\nUsando API https://developers.themoviedb.org/3/getting-started/introduction para dados\r\nCHAVE: c96ca97f64e72908cf91d39ab92e04fa\r\nEXEMPLO: https://api.themoviedb.org/3/movie/550?api_key=c96ca97f64e72908cf91d39ab92e04fa\r\n*/\r\n\r\nconst API_KEY = \"c96ca97f64e72908cf91d39ab92e04fa\";\r\nconst API_BASE = \"https://api.themoviedb.org/3\";\r\n\r\n/*  \r\n- Originais Netflix\r\n- Remomendados\r\n- Em alta \r\n- Ação\r\n- Comédia\r\n- Terror\r\n- Romance \r\n- Documentário\r\n*/\r\n\r\n//Fetch na url com JSON\r\nconst basicFetch = async (endpoint) => {\r\n  const req = await fetch(`${API_BASE}${endpoint}`);\r\n  const json = await req.json();\r\n  return json;\r\n};\r\n\r\nexport default {\r\n  getHomeList: async () => {\r\n    //Async await ==> espera a resposta da API\r\n    return [\r\n      {\r\n        slug: \"originals\",\r\n        title: \"Originais do Netflix\",\r\n        items: await basicFetch(\r\n          `/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"trending\",\r\n        title: \"Recomendados para Você\",\r\n        items: await basicFetch(\r\n          `/trending/all/week?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"toprated\",\r\n        title: \"Em Alta\",\r\n        items: await basicFetch(\r\n          `/movie/top_rated?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"action\",\r\n        title: \"Ação\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"comedy\",\r\n        title: \"Comédia\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"horror\",\r\n        title: \"Terror\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"romance\",\r\n        title: \"Romance\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"documentary\",\r\n        title: \"Documentário\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n    ];\r\n  },\r\n\r\n  getMovieInfo: async (moveId, type) => {\r\n    let info = {};\r\n\r\n       if (moveId) {\r\n          switch (type) {\r\n          case \"movie\":\r\n            info = await basicFetch(\r\n              `/movie/${moveId}?language=pt-BR&api_key=${API_KEY}`\r\n            );\r\n            break;\r\n          case \"tv\":\r\n            info = await basicFetch(\r\n              `/tv/${moveId}?language=pt-BR&api_key=${API_KEY}`\r\n            );\r\n            break;\r\n          default:\r\n            info = \"[ERRO]: nor a movie or tv\";\r\n        }\r\n    }\r\n    \r\n\r\n    return info;\r\n  },\r\n};\r\n","import React, {useState} from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\n\r\nfunction MovieRow({ title, items }) {\r\n  //{title, items} = props desconstruido, evitar usar props.title\r\n  const [scrollX, setScrollX] = useState(0);\r\n\r\n\r\n  const handleLeftArrow = () =>{\r\n    let x = scrollX + Math.round(window.innerWidth / 2); //Metade da tela do usuário\r\n    if(x > 0){\r\n      x = 0;\r\n    }\r\n    setScrollX(x);\r\n  }\r\n  const handleRightArrow = () =>{\r\n    let x = scrollX - Math.round(window.innerWidth / 2); \r\n    let listW = items.results.length * 150;\r\n    if((window.innerWidth - listW) > x){\r\n      x = (window.innerWidth - listW) - 60;\r\n    }\r\n    setScrollX(x);\r\n  } \r\n \r\n  return (\r\n    <div className=\"movieRow\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n        <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n        <NavigateNextIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--listarea\">\r\n        <div className=\"movieRow--list\" style={{\r\n            marginLeft: scrollX,\r\n            width: items.results.length * 150, \r\n        }}>\r\n          {items.results.length > 0 &&\r\n            items.results.map((item, key) => (\r\n              <div key={key} className=\"movieRow--item\">\r\n                <img\r\n                  alt={item.original_title}\r\n                  src={`https://image.tmdb.org/t/p/w200${item.poster_path}`}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieRow;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FeaturedMovie({ item }) {\r\n\r\n  let firstDate = new Date(item.first_air_date);\r\n  let genres = [];\r\n  for(let i in item.genres){\r\n      genres.push(item.genres[i].name)\r\n  }\r\n\r\n  let description = item.overview;  //Limitando o overview\r\n  if(description.length > 200){\r\n    description = description.substring(0, 200)+'...';\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">\r\n        <div className=\"featured--horizontal\">\r\n          <div className=\"featured--name\">{item.original_name}</div>\r\n          <div className=\"featured--info\">\r\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n            <div className=\"featured--year\">{firstDate.getFullYear()} </div>\r\n            <div className=\"featured--seasons\">\r\n              {item.number_of_seasons} temporada\r\n              {item.number_of_seasons !== 1 ? \"s\" : \"\"}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"featured--description\">{description}</div>\r\n          <div className=\"featured--buttons\">\r\n            <a className=\"featured--button1\" href={`/watch/${item.id}`}> ► Assistir</a>\r\n            <a className=\"featured--button2\" href={`/list/add/${item.id}`}>+ Minha Lista</a>\r\n          </div>\r\n          <div className=\"featured--genres\">\r\n            <strong>Gêneros: </strong> \r\n            {genres.join(', ')}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default FeaturedMovie;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header({black}) {\r\n  return (\r\n    <header className={black ? 'black' : '  '}>\r\n      <div className=\"header--logo\">\r\n        <a href=\"/\">\r\n          <img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            alt=\"logo\"\r\n          ></img>\r\n        </a>\r\n        </div>\r\n        <div className=\"header--user\">\r\n          <a href=\"https://github.com/ceconcarlsen\" target=\"_blank\" rel=\"noreferrer\">\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"user\"></img>\r\n          </a>\r\n        </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n//Dados\nimport Tmdb from \"./Tmdb\";\n\n//Components\nimport MovieRow from \"./Components/MovieRow\";\nimport FeaturedMovie from \"./Components/FeaturedMovie\";\nimport Header from \"./Components/Header\";\n\nfunction App() {\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    //Quando a aplicação for carregada, executa a função\n    const loadAll = async () => {\n      //Pegando a lista dos filmes\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); //Novo state da minha aplicação\n\n      //Pegando o fimle em destaque\n      let originals = list.filter((i) => i.slug === \"originals\");\n      let randomChosen = Math.floor(\n        Math.random() * (originals[0].items.results.length - 1)\n      );\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, \"tv\");\n\n      setFeatureData(chosenInfo); //Info enviada ao componente FeaturedMovie\n    };\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    //\n\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n    window.addEventListener(\"scroll\", scrollListener);\n\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader} />\n      {featureData && <FeaturedMovie item={featureData} />}\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\" alt=\"\"></img>\n        <h3>API  <a href=\"https://developers.themoviedb.org/3\" target=\"_blank\" rel=\"noreferrer\">Themoviedb.org</a></h3>\n        <h3>Gabriel Cecon Carlsen 2021</h3>\n      </footer>\n\n      {movieList.length <= 0 &&\n      <div className=\"loading\">\n        <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando\"></img>\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}